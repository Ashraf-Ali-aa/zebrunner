{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Zebrunner (Community Edition) Overview Zebrunner (Community Edition) is a Continuous configuration automation framework for continuous testing (running various kinds of tests on the code to gain successive levels of confidence in the quality of the code), and (optionally) continuous deployment. It is built in accordance with Infrastructure as Code processes. It is integrated by default with carina-core open source TestNG framework and uses Jenkins as a CI Tool. Zebrunner is built on top of popular docker solutions, it includes Postgres database, Zebrunner Reporting - former Zafira Reporting Tool, Jenkins Master/Slaves Nodes, Selenium Hub(s), MCloud , SonarQube , etc. In additions it is easily intergated with 3rd party devices/browsers cloud providers like: Zebrunner Engine , Browserstack , SauceLabs etc All components are deployed under NGiNX WebServer which can be configured in a fully secured environment Zebrunner and its subcomponents all together can be used as an effective Test Automation infrastructure for test automation development, execution, management, etc. Purpose Welcome to the Zebrunner Tutorial. This manual is designed to help you install, configure and maintain your system, and to optimize and extend or re-configure it to meet the changing needs of your business. In short, the aim of this manual is to explain the tasks involved in administering Zebrunner (Community Edition) Audience This guide is written for all levels of administrators, from those responsible for deployment and setup, to those who oversee the entire system and its usage. In addition, some information from User Guide is intended for TestOps engineers who want to build effective Test Automation process and follow best practices. Assumed Knowledge Installation and Configuration guides are for administrators who install, deploy and Manage Zebrunner products. It assumes the following knowledge: Docker platform and docker compose orchestration tool skills UNIX/Linux administration skills Security and server administration skills Understanding of your organization's security infrastructure, including authentication providers such as LDAP, and use of SSL Understanding of your organization's network environment and port usage User guide is for TestOps engineers who develop test automation scenarios, execute and maintain them etc. It assumes the following knowledge: Preferable Test Automation language and framework. Java/ Maven/ TestNG / Carina experience is a plus Understanding of the basics of Jenkins pipeline and JobDSL License Code - Apache Software License v2.0 Documentation and Site - Creative Commons Attribution 4.0 International License","title":"Overview"},{"location":"#zebrunner-community-edition","text":"","title":"Zebrunner (Community Edition)"},{"location":"#overview","text":"Zebrunner (Community Edition) is a Continuous configuration automation framework for continuous testing (running various kinds of tests on the code to gain successive levels of confidence in the quality of the code), and (optionally) continuous deployment. It is built in accordance with Infrastructure as Code processes. It is integrated by default with carina-core open source TestNG framework and uses Jenkins as a CI Tool. Zebrunner is built on top of popular docker solutions, it includes Postgres database, Zebrunner Reporting - former Zafira Reporting Tool, Jenkins Master/Slaves Nodes, Selenium Hub(s), MCloud , SonarQube , etc. In additions it is easily intergated with 3rd party devices/browsers cloud providers like: Zebrunner Engine , Browserstack , SauceLabs etc All components are deployed under NGiNX WebServer which can be configured in a fully secured environment Zebrunner and its subcomponents all together can be used as an effective Test Automation infrastructure for test automation development, execution, management, etc.","title":"Overview"},{"location":"#purpose","text":"Welcome to the Zebrunner Tutorial. This manual is designed to help you install, configure and maintain your system, and to optimize and extend or re-configure it to meet the changing needs of your business. In short, the aim of this manual is to explain the tasks involved in administering Zebrunner (Community Edition)","title":"Purpose"},{"location":"#audience","text":"This guide is written for all levels of administrators, from those responsible for deployment and setup, to those who oversee the entire system and its usage. In addition, some information from User Guide is intended for TestOps engineers who want to build effective Test Automation process and follow best practices.","title":"Audience"},{"location":"#assumed-knowledge","text":"Installation and Configuration guides are for administrators who install, deploy and Manage Zebrunner products. It assumes the following knowledge: Docker platform and docker compose orchestration tool skills UNIX/Linux administration skills Security and server administration skills Understanding of your organization's security infrastructure, including authentication providers such as LDAP, and use of SSL Understanding of your organization's network environment and port usage User guide is for TestOps engineers who develop test automation scenarios, execute and maintain them etc. It assumes the following knowledge: Preferable Test Automation language and framework. Java/ Maven/ TestNG / Carina experience is a plus Understanding of the basics of Jenkins pipeline and JobDSL","title":"Assumed Knowledge"},{"location":"#license","text":"Code - Apache Software License v2.0 Documentation and Site - Creative Commons Attribution 4.0 International License","title":"License"},{"location":"config-guide/","text":"Configuration Guide Organization Setup Register Organization Open Jenkins->Management_Jobs folder. Run \"RegisterOrganization\" providing your SCM (GitHub) organization name as folderName New folder is created with default content Register Repository Open your organization folder Run \"RegisterRepository\" pointing to your TestNG repository (use https://github.com/qaprosoft/carina-demo as sample repo to scan) -> Repository is scanned and TestNG jobs created Setup GitHub WebHook (onPush Job/Event) Go to your GitHub repository Click \"Settings\" tab Click \"Webhooks\" menu option Click \"Add webhook\" button Type http://your-jenkins-domain.com/jenkins/github-webhook/ into \"Payload URL\" field Select application/json in \"Content Type\" field Tick \"Send me everything.\" option Click \"Add webhook\" button Trigger onPush Job(s) After any push or merge into the master onPush-repo job is launched, suites scanned, TestNG jobs created Set up \"GitHub Pull Request Builder\": Open Jenkins -> Credentials Update Username and Password for \"ghprbhook-token\" credentials Go to Manage Jenkins -> Configure System Specify a value for GitHub Server API URL, for example, https://api.github.com Note: corporate versions of GitHub should have a different value, for example, https://github.mydomain.com/api/v3 Provide GitHub credentials with Admin privileges for your organization Check the \"Auto-manage webhooks\" param [Optional] update \"Commit Status Context\" to \"zebrunner\" value to identify that changes in GitHub PR are automatically generated by it Save changes Note: be sure to test integration through the Jenkins UI Restart Jenkins Create new Pull Request to your repository -> Verify that Pull request jobs are launched SonarQube Integration In order to integrate non-embedded SonarQube instance, please: * Login to Jenkins, go to Manage Jenkins > System Configuration > Global Properties * Search for SONAR_URL and change the value for your private SonarQube instance Note: Compatible SonarQube version is 7.9.3+ Create a GitHub App Follow Steps 1\u20134 here to start creating your GitHub App Under GitHub App name , give your app a name, such as SonarQubePRDecorator. Add a Homepage URL . GitHub requires this, but it isn't important for Pull Request decoration. You can use any URL, such as https://zebrunner.com/. Enter your User authorization callback URL . Set this to your instance's base URL. For example, https://your.infra.domain.com/sonarqube/oauth2/callback Add Webhook URL . Set this to your instance's base URL. For example, https://zebrunner.com/. Grant access for the following Permissions : Permission Access Checks Read & Write Metadata Read-Only Pull Requests Read & Write Commit statuses Read-only > Note: if your are using Github Enterprise the permission \"Metadata\" is renamed to \"Repository Metadata\" Under \"Where can this GitHub App be installed?,\" select Any account. Click Create GitHub App . This will take you to your new GitHub App's page. Scroll down to the bottom of your app page and click < Generate Private Key. This downloads a .pem file that you'll use in the Configure SonarQube server section. Tip: in order to acces the private key open the .pem file with your favorite text editor. Install your app Installing your GitHub App from the app's settings page. Go to your GitHub profile > Developer settings > GitHub Apps > Your app name > Install App Select the organization to install the app Select All repositories Clik install Configure SonarQube server Go to your sonarqube server page and login. Note: default credentials for sonar are: admin/admin, we recommend changing them after setting up the infra. Add your SonarQube server under Configuration > General Settings > Server base URL In Configuration > GitHub add your GitHub App Client ID, Client Secret In Configuration > Pull Request add your GitHub App ID, App Name, App Private Key and select Provider as GitHub Note: make sure to copy all content from the .pem file generated in the Create GitHub App section Source Control Tools Integration For enterprise github or gitlab, you can declare the following global variables in Jenkins and the entire infrastructure will use them immediately by default: Manage jenkins -> Configure system Global properties -> Add property GITHUB_API_URL -> https://$GITHUB_HOST/api/v3 GITHUB_HOST -> github.mydomain.com GITHUB_HTML_URL -> https://$GITHUB_HOST/$GITHUB_ORGANIZATION GITHUB_ORGANIZATION -> myorganization GITHUB_SSH_URL -> git@$GITHUB_HOST:$GITHUB_ORGANIZATION Support Channel Join Telegram channel in case of any question","title":"Configuration Guide"},{"location":"config-guide/#configuration-guide","text":"","title":"Configuration Guide"},{"location":"config-guide/#organization-setup","text":"","title":"Organization Setup"},{"location":"config-guide/#register-organization","text":"Open Jenkins->Management_Jobs folder. Run \"RegisterOrganization\" providing your SCM (GitHub) organization name as folderName New folder is created with default content","title":"Register Organization"},{"location":"config-guide/#register-repository","text":"Open your organization folder Run \"RegisterRepository\" pointing to your TestNG repository (use https://github.com/qaprosoft/carina-demo as sample repo to scan) -> Repository is scanned and TestNG jobs created","title":"Register Repository"},{"location":"config-guide/#setup-github-webhook-onpush-jobevent","text":"Go to your GitHub repository Click \"Settings\" tab Click \"Webhooks\" menu option Click \"Add webhook\" button Type http://your-jenkins-domain.com/jenkins/github-webhook/ into \"Payload URL\" field Select application/json in \"Content Type\" field Tick \"Send me everything.\" option Click \"Add webhook\" button","title":"Setup GitHub WebHook (onPush Job/Event)"},{"location":"config-guide/#trigger-onpush-jobs","text":"After any push or merge into the master onPush-repo job is launched, suites scanned, TestNG jobs created","title":"Trigger onPush Job(s)"},{"location":"config-guide/#set-up-github-pull-request-builder","text":"Open Jenkins -> Credentials Update Username and Password for \"ghprbhook-token\" credentials Go to Manage Jenkins -> Configure System Specify a value for GitHub Server API URL, for example, https://api.github.com Note: corporate versions of GitHub should have a different value, for example, https://github.mydomain.com/api/v3 Provide GitHub credentials with Admin privileges for your organization Check the \"Auto-manage webhooks\" param [Optional] update \"Commit Status Context\" to \"zebrunner\" value to identify that changes in GitHub PR are automatically generated by it Save changes Note: be sure to test integration through the Jenkins UI Restart Jenkins Create new Pull Request to your repository -> Verify that Pull request jobs are launched","title":"Set up \"GitHub Pull Request Builder\":"},{"location":"config-guide/#sonarqube-integration","text":"In order to integrate non-embedded SonarQube instance, please: * Login to Jenkins, go to Manage Jenkins > System Configuration > Global Properties * Search for SONAR_URL and change the value for your private SonarQube instance Note: Compatible SonarQube version is 7.9.3+","title":"SonarQube Integration"},{"location":"config-guide/#create-a-github-app","text":"Follow Steps 1\u20134 here to start creating your GitHub App Under GitHub App name , give your app a name, such as SonarQubePRDecorator. Add a Homepage URL . GitHub requires this, but it isn't important for Pull Request decoration. You can use any URL, such as https://zebrunner.com/. Enter your User authorization callback URL . Set this to your instance's base URL. For example, https://your.infra.domain.com/sonarqube/oauth2/callback Add Webhook URL . Set this to your instance's base URL. For example, https://zebrunner.com/. Grant access for the following Permissions : Permission Access Checks Read & Write Metadata Read-Only Pull Requests Read & Write Commit statuses Read-only > Note: if your are using Github Enterprise the permission \"Metadata\" is renamed to \"Repository Metadata\" Under \"Where can this GitHub App be installed?,\" select Any account. Click Create GitHub App . This will take you to your new GitHub App's page. Scroll down to the bottom of your app page and click < Generate Private Key. This downloads a .pem file that you'll use in the Configure SonarQube server section. Tip: in order to acces the private key open the .pem file with your favorite text editor.","title":"Create a GitHub App"},{"location":"config-guide/#install-your-app","text":"Installing your GitHub App from the app's settings page. Go to your GitHub profile > Developer settings > GitHub Apps > Your app name > Install App Select the organization to install the app Select All repositories Clik install","title":"Install your app"},{"location":"config-guide/#configure-sonarqube-server","text":"Go to your sonarqube server page and login. Note: default credentials for sonar are: admin/admin, we recommend changing them after setting up the infra. Add your SonarQube server under Configuration > General Settings > Server base URL In Configuration > GitHub add your GitHub App Client ID, Client Secret In Configuration > Pull Request add your GitHub App ID, App Name, App Private Key and select Provider as GitHub Note: make sure to copy all content from the .pem file generated in the Create GitHub App section","title":"Configure SonarQube server"},{"location":"config-guide/#source-control-tools-integration","text":"For enterprise github or gitlab, you can declare the following global variables in Jenkins and the entire infrastructure will use them immediately by default: Manage jenkins -> Configure system Global properties -> Add property GITHUB_API_URL -> https://$GITHUB_HOST/api/v3 GITHUB_HOST -> github.mydomain.com GITHUB_HTML_URL -> https://$GITHUB_HOST/$GITHUB_ORGANIZATION GITHUB_ORGANIZATION -> myorganization GITHUB_SSH_URL -> git@$GITHUB_HOST:$GITHUB_ORGANIZATION","title":"Source Control Tools Integration"},{"location":"config-guide/#support-channel","text":"Join Telegram channel in case of any question","title":"Support Channel"},{"location":"faq/","text":"F.A.Q (Draft) Ferox educta Lorem markdownum ramos, dura suadet Eumenides pudet; et non vultus dixit ostendens non omnis ! Auras maiorque vidi nec: timoris reddidit lumina exsul fuit Vulcani audenti, pinum ensem prohibent recursus Tyrrhenus cum silvas. Tamen faciam supplentur magnique est Aiacis parva quod incingitur, subiectaque! Caput per Numidasque copia. Retia sive: Iunonis superabat fletibus aenae. Fuerat lucida flumina et auras Insania, et et Phorbas. Arma sub nomine a tantum nefasque serpere. Nuruumque pigra exsequitur et manerem nondum frutex me partibus et necis! Finita vero gavisus, quam, nobis dextra invia contulit cupressu illius an terras quaecumque clausum mihi. Iuga raptae post, est iniectos, comantem vultus, ulla, tum frondere villo cecidit. Hactenus imas non eundem harenis violesque saevitiam agant vindicat solane est corpore agros quoque, in alta praerupit. Sit quae quod Tritonia; suras riget ille fortuna frustra missum sceleratus urbem, Troiae cum , nec. Vocem formae Sisyphe invidit post numina Adit flamma dubie muneris. Hic aequoreae viribus, a! Omnes voce, cupidine precibus: fruges dixit, discede faciente Diti . Est ut cognoscet mihi. var netbios = infringement_input_monochrome; if (null == cadTerabytePetaflops.onKeystroke(mpeg_overclocking, rippingKindle, 1)) { zebibyte -= 45 + marketReadmeWorm + gbps_external_margin; sessionWebsitePum(4, -1 - backup); } else { party += onlineSmtp(formatXmlManet, nvramDvdParse) + basic; nanometerHot = 1; batch.file += publishing_configuration(gigabitImage(modeTagPlug), peripheralSpoolingMyspace(5, newsgroupPitchJava, input_error), 17); } if (serp == card) { processTweak += primaryPim; metafile -= 4; petabyte.forum = iteration_matrix; } else { dsl = 3 + task_bar_usb; software = data(address_disk, 5 + 2); } var and_im_powerpoint = newbie - oasis / terminalPcYahoo(2, right_rdram_graphic, kbpsStation); var io = mashup_raster_ict + microcomputer_user; Pater in vate arcana et vertitur tenent, versus evolvere. Coegerat tenebris erat Thermodontiaca penates arbitrium mentita fulvo placuit potius miserabilis mensura omnis ora cortice arbor, exstinctum. Si longum, grave genitoris Iove primasque urbes: quem flet vident corniger coniugis eo, molibus est mariti quanto. Et Iuno. Secutis ex ventos Tam crescens adhaerent versantem autem foret ingenti. Sui lupis Menoeten finemque, fulgura, et agmenque , movit tepido, domo nam iubae Chrysenque relicto infantibus. Tuba ausa locis praebet, alta sunt utilis Iuno ossa illi, tunc labens? Et sed caruerunt notus paulumque formaeque: me Creten; dulces. Troiae nec in salutifer esse memorabat pariterque , moratur thalamis fidissima venter pendebant captam totoque nequit et? Visaque plena puellari artem. Crura et verso Medusae Demoleon peremi liventia contorta et stuppea testatos sequitur. Cupido fecisse! Ferus usu ferumque nefas, in nisi Abantiades est, eodem nomen, duram pennis.","title":"F.A.Q (Draft)"},{"location":"faq/#faq-draft","text":"","title":"F.A.Q (Draft)"},{"location":"faq/#ferox-educta","text":"Lorem markdownum ramos, dura suadet Eumenides pudet; et non vultus dixit ostendens non omnis ! Auras maiorque vidi nec: timoris reddidit lumina exsul fuit Vulcani audenti, pinum ensem prohibent recursus Tyrrhenus cum silvas. Tamen faciam supplentur magnique est Aiacis parva quod incingitur, subiectaque! Caput per Numidasque copia. Retia sive: Iunonis superabat fletibus aenae. Fuerat lucida flumina et auras Insania, et et Phorbas. Arma sub nomine a tantum nefasque serpere. Nuruumque pigra exsequitur et manerem nondum frutex me partibus et necis! Finita vero gavisus, quam, nobis dextra invia contulit cupressu illius an terras quaecumque clausum mihi. Iuga raptae post, est iniectos, comantem vultus, ulla, tum frondere villo cecidit. Hactenus imas non eundem harenis violesque saevitiam agant vindicat solane est corpore agros quoque, in alta praerupit. Sit quae quod Tritonia; suras riget ille fortuna frustra missum sceleratus urbem, Troiae cum , nec.","title":"Ferox educta"},{"location":"faq/#vocem-formae-sisyphe-invidit-post-numina","text":"Adit flamma dubie muneris. Hic aequoreae viribus, a! Omnes voce, cupidine precibus: fruges dixit, discede faciente Diti . Est ut cognoscet mihi. var netbios = infringement_input_monochrome; if (null == cadTerabytePetaflops.onKeystroke(mpeg_overclocking, rippingKindle, 1)) { zebibyte -= 45 + marketReadmeWorm + gbps_external_margin; sessionWebsitePum(4, -1 - backup); } else { party += onlineSmtp(formatXmlManet, nvramDvdParse) + basic; nanometerHot = 1; batch.file += publishing_configuration(gigabitImage(modeTagPlug), peripheralSpoolingMyspace(5, newsgroupPitchJava, input_error), 17); } if (serp == card) { processTweak += primaryPim; metafile -= 4; petabyte.forum = iteration_matrix; } else { dsl = 3 + task_bar_usb; software = data(address_disk, 5 + 2); } var and_im_powerpoint = newbie - oasis / terminalPcYahoo(2, right_rdram_graphic, kbpsStation); var io = mashup_raster_ict + microcomputer_user; Pater in vate arcana et vertitur tenent, versus evolvere. Coegerat tenebris erat Thermodontiaca penates arbitrium mentita fulvo placuit potius miserabilis mensura omnis ora cortice arbor, exstinctum. Si longum, grave genitoris Iove primasque urbes: quem flet vident corniger coniugis eo, molibus est mariti quanto. Et Iuno.","title":"Vocem formae Sisyphe invidit post numina"},{"location":"faq/#secutis-ex-ventos","text":"Tam crescens adhaerent versantem autem foret ingenti. Sui lupis Menoeten finemque, fulgura, et agmenque , movit tepido, domo nam iubae Chrysenque relicto infantibus. Tuba ausa locis praebet, alta sunt utilis Iuno ossa illi, tunc labens? Et sed caruerunt notus paulumque formaeque: me Creten; dulces. Troiae nec in salutifer esse memorabat pariterque , moratur thalamis fidissima venter pendebant captam totoque nequit et? Visaque plena puellari artem. Crura et verso Medusae Demoleon peremi liventia contorta et stuppea testatos sequitur. Cupido fecisse! Ferus usu ferumque nefas, in nisi Abantiades est, eodem nomen, duram pennis.","title":"Secutis ex ventos"},{"location":"install-guide/","text":"Installation Guide Initial setup Clone Zebrunner recursive and launch setup procedure git clone --recurse-submodule https://github.com/zebrunner/zebrunner.git && cd zebrunner && ./zebrunner.sh setup Provide required details to finish configuration Start services ./zebrunner.sh start After startup, the following components are available: Use your host domain address or IP. admin/admin are hardcoded SonarQube credentials, and they can be updated inside the Sonar Administration panel Components URL Zebrunner Reporting http://demo.qaprosoft.com Jenkins http://demo.qaprosoft.com/jenkins SonarQube http://demo.qaprosoft.com/sonarqube Web Selenium Hub http://demo:demo@demo.qaprosoft.com/selenoid/wd/hub Mobile Selenium Hub http://demo:demo@demo.qaprosoft.com/mcloud/wd/hub Mobile SmartTest Farm http://demo.qaprosoft.com/stf Support Channel Join Telegram channel in case of any question","title":"Installation Guide"},{"location":"install-guide/#installation-guide","text":"","title":"Installation Guide"},{"location":"install-guide/#initial-setup","text":"Clone Zebrunner recursive and launch setup procedure git clone --recurse-submodule https://github.com/zebrunner/zebrunner.git && cd zebrunner && ./zebrunner.sh setup Provide required details to finish configuration Start services ./zebrunner.sh start After startup, the following components are available: Use your host domain address or IP. admin/admin are hardcoded SonarQube credentials, and they can be updated inside the Sonar Administration panel Components URL Zebrunner Reporting http://demo.qaprosoft.com Jenkins http://demo.qaprosoft.com/jenkins SonarQube http://demo.qaprosoft.com/sonarqube Web Selenium Hub http://demo:demo@demo.qaprosoft.com/selenoid/wd/hub Mobile Selenium Hub http://demo:demo@demo.qaprosoft.com/mcloud/wd/hub Mobile SmartTest Farm http://demo.qaprosoft.com/stf","title":"Initial setup"},{"location":"install-guide/#support-channel","text":"Join Telegram channel in case of any question","title":"Support Channel"},{"location":"prerequisites/","text":"Prerequisites System requirements Hardware requirements Requirements Operating System Linux Ubuntu 16.04, 18.04 Linux CentOS 7+ Amazon Linux 2 CPU 8+ Cores Memory 32 Gb RAM Free space SSD 128Gb+ of free space All in one standalone deployment supports up to 5 parallel executors for web and api tests. The most optimal EC2 instance type is t3.2xlarge with enabled \"T2/T3 Unlimited\" feature Software requirements Install docker ( Ubuntu 16.04 , Ubuntu 18.04 , Amazon Linux 2 , Redhat/Cent OS ) Install docker-composer 1.25.5+ Security requirements NGiNX WebServer port is shared By default 80 for http and 443 for https GitHub OAuth App Follow Steps 1\u20134 here to start creating your GitHub OAuth App Under GitHub App name , give your app a name, such as \"Zebrunner (Community Edition)\". Add a Homepage URL and Authorization callback URL . Set this to your instance's base URL. For example, https://your.zebrunner.domain.com/ [Optional] AWS S3 Bucket Only for case when embedded S3 compatible minio storage not used Create bucket Create new bucket in AWS S3 (choose region closer to your location) In bucket \u201cPublic Access Settings\u201d uncheck all properties (later security will be configured on other level) In \u201cBucket Policy\u201d put below json: { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"AllowGetObject\", \"Effect\": \"Allow\", \"Principal\": \"*\", \"Action\": \"s3:GetObject\", \"Resource\": \"arn:aws:s3:::MYBUCKET/*\", \"Condition\": { \"StringLike\": { \"aws:UserAgent\": \"MyStrongPassword\" } } } ] } replacing MYBUCKET with actual name and putting as strong password instead of MyStrongPassword Create user Goto IAM -> Policies -> Create Policy -> Active JSON Put below value, replacing MYBUCKET with actual value { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": \"s3:ListAllMyBuckets\", \"Resource\": \"arn:aws:s3:::*\" }, { \"Effect\": \"Allow\", \"Action\": \"s3:*\", \"Resource\": [ \"arn:aws:s3:::MYBUCKET\", \"arn:aws:s3:::MYBUCKET/*\" ] } ] } Click Review policy -> specify name like zebrunner-s3-writer-policy -> Create Policy Goto IAM -> Users -> Add User Specify username like zebrunner-s3-user -> Pick \u201cProgrammatic access\u201d -> Next: Permissions: -> Attach existing policies directly Choose previously created policy -> Next: Tags -> Next: Review -> Create User Remember Access Key ID, Secret key and UserAgent values","title":"Prerequisites"},{"location":"prerequisites/#prerequisites","text":"","title":"Prerequisites"},{"location":"prerequisites/#system-requirements","text":"","title":"System requirements"},{"location":"prerequisites/#hardware-requirements","text":"Requirements Operating System Linux Ubuntu 16.04, 18.04 Linux CentOS 7+ Amazon Linux 2 CPU 8+ Cores Memory 32 Gb RAM Free space SSD 128Gb+ of free space All in one standalone deployment supports up to 5 parallel executors for web and api tests. The most optimal EC2 instance type is t3.2xlarge with enabled \"T2/T3 Unlimited\" feature","title":"Hardware requirements"},{"location":"prerequisites/#software-requirements","text":"Install docker ( Ubuntu 16.04 , Ubuntu 18.04 , Amazon Linux 2 , Redhat/Cent OS ) Install docker-composer 1.25.5+","title":"Software requirements"},{"location":"prerequisites/#security-requirements","text":"NGiNX WebServer port is shared By default 80 for http and 443 for https","title":"Security requirements"},{"location":"prerequisites/#github-oauth-app","text":"Follow Steps 1\u20134 here to start creating your GitHub OAuth App Under GitHub App name , give your app a name, such as \"Zebrunner (Community Edition)\". Add a Homepage URL and Authorization callback URL . Set this to your instance's base URL. For example, https://your.zebrunner.domain.com/","title":"GitHub OAuth App"},{"location":"prerequisites/#optional-aws-s3-bucket","text":"Only for case when embedded S3 compatible minio storage not used","title":"[Optional] AWS S3 Bucket"},{"location":"prerequisites/#create-bucket","text":"Create new bucket in AWS S3 (choose region closer to your location) In bucket \u201cPublic Access Settings\u201d uncheck all properties (later security will be configured on other level) In \u201cBucket Policy\u201d put below json: { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"AllowGetObject\", \"Effect\": \"Allow\", \"Principal\": \"*\", \"Action\": \"s3:GetObject\", \"Resource\": \"arn:aws:s3:::MYBUCKET/*\", \"Condition\": { \"StringLike\": { \"aws:UserAgent\": \"MyStrongPassword\" } } } ] } replacing MYBUCKET with actual name and putting as strong password instead of MyStrongPassword","title":"Create bucket"},{"location":"prerequisites/#create-user","text":"Goto IAM -> Policies -> Create Policy -> Active JSON Put below value, replacing MYBUCKET with actual value { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": \"s3:ListAllMyBuckets\", \"Resource\": \"arn:aws:s3:::*\" }, { \"Effect\": \"Allow\", \"Action\": \"s3:*\", \"Resource\": [ \"arn:aws:s3:::MYBUCKET\", \"arn:aws:s3:::MYBUCKET/*\" ] } ] } Click Review policy -> specify name like zebrunner-s3-writer-policy -> Create Policy Goto IAM -> Users -> Add User Specify username like zebrunner-s3-user -> Pick \u201cProgrammatic access\u201d -> Next: Permissions: -> Attach existing policies directly Choose previously created policy -> Next: Tags -> Next: Review -> Create User Remember Access Key ID, Secret key and UserAgent values","title":"Create user"},{"location":"user-guide/","text":"User Guide Preconditions TestNG repository is available. For quick start use carina archetype Infrustructure is deployed, and optionally onPullRequest/onPush events configured. Continious Intergration (Jenkins) All test jobs are created and maintained automatically according to IaC processes. For every TestNG suite dedicated job is created. For example visit carina suites Test Jobs (API/Web/Mobile) To generate special type of jobs, coverage matrix etc we have to use special annotations otherwise \"api\" job is generated using suite \"name\" . Test Jobs can be executed on-demand, scheduled, included into different testing layers (Smoke, Regression, etc.). Create a Job Open TestNG suite xml file Fill the bunch of parameters in your xml: <parameter name=\"suiteOwner\" value=\"qpsdemo\"/> <parameter name=\"jenkinsJobName\" value=\"Job1\"/> <parameter name=\"jenkinsJobType\" value=\"api\"/> <parameter name=\"jenkinsEmail\" value=\"test@qaprosoft.com\"/> <parameter name=\"jenkinsEnvironments\" value=\"DEMO\"/> Commit and merge. After scan is finished (automatic or manual) \"Job1\" test job is created in Jenkins. Run a Job Steps: Login to Jenkins Go to organization/repository and open a Job Click Build with Parameters and run Build When Job is completed analyze published reports/logs (Carina reports/Zafira reports/TestNG reports) Schedule a Job Open TestNG suite xml file Declare \"scheduling\" parameter : <parameter name=\"scheduling\" value=\"H 2 * * *\" /> Note: Provide regular Jenkins Cron expression as a value. To organize multiple schedules use \"\\n\" as separator: <parameter name=\"scheduling\" value=\"H 2 * * *\\nH 10 * * *\" /> Commit and merge. Delete a Job Delete TestNG suite xml file Commit and merge. Ask your administrator to remove the Job on Jenkins. Cron Jobs (Layer of Testing) Jenkins Pipeline Cron - this is a job that can execute different suites/jobs in scope of single run. Test Job can be assigned to testing layer(cron) using \"jenkinsRegressionPipeline\" annotation. Create a Cron Open TestNG suite xml file Declare \"jenkinsRegressionPipeline\" property in xml: <parameter name=\"jenkinsRegressionPipeline\" value=\"nightly_regression, full_regression\"/> Commit and merge. After scan is finished (automatic or manual) nightly_regression and full_regression crons are created in Jenkins. During execution nightly_regression or full_regression crons current test suite(job) must be executed. How to Set up Configuration Matrix Open TestNG suite xml file Declare \"jenkinsRegressionMatrix\" property in xml: <parameter name=\"jenkinsRegressionPipeline\" value=\"Carina-Demo-Regression-Pipeline\"/> <parameter name=\"jenkinsRegressionMatrix\" value=\"env: DEMO, branch: master; env:PROD, branch: prod\"/> Commit and merge. After scan is finished (automatic or manual) Carina-Demo-Regression-Pipeline cron job is created in Jenkins. Every time you run Carina-Demo-Regression-Pipeline job it should start your suite xml child job twice for DEMO and PROD environments using appropriate branches. Note: Any param values pairs can be provided. Comma separated - for single job params. Semicolon separated for multiple child job params. Run a Cron Steps: Go to organization/repository and open a Cron Job Note: There is a \"CRON\" view for such kind of jobs Click Build with Parameters and run Build Cron Job should trigger children jobs according to desired configuration matrix When Cron and children jobs are finished analyze children jobs' reports/logs (Carina reports/Zafira reports/TestNG reports) Schedule a Cron Open any child TestNG suite xml file Declare \"jenkinsRegressionScheduling\" parameter : <parameter name=\"jenkinsRegressionPipeline\" value=\"Carina-Demo-Regression-Pipeline\"/> <parameter name=\"jenkinsRegressionScheduling\" value=\"H 2 * * *\" /> Commit and merge. After scan is finished (automatic or manual) Carina-Demo-Regression-Pipeline is created and sheduled to run periodically in Jenkins. Delete a Cron Open each TestNG suite xml file(s) and remove declaration of \"jenkinsRegressionPipeline\" property. Commit and merge. Ask your administrator to delete Cron job in Jenkins Special Annotations To start there are a number of additional parameters that can be added to an existing Test Suite xml. These parameters are: jenkinsJobName - This property is just the name that Jenkins should create a job for, the normal pattern here is to include the platform name in the job itself to make it easier to find inside of Jenkins. jenkinsJobDisabled - This property is for disable job on Jenkins. jenkinsJobType \u2013 This property tells Jenkins what type of job it is. This field can take a \u201cweb\u201d, \u201capi\u201d, \u201cios\u201d, \u201candroid\u201d value. For each type of job appropriate capabilities and parameter are generated. If value set to \u201capi\u201d \u2013 Jenkins knows that there is no need to use web browser for run this Test Suite. If value set to \u201cweb\u201d \u2013 Jenkins will use web browser to run the Test. Chrome browser will be used by default. If value set to \u201cios\u201d \u2013 ios native application test job. If value set to \u201candroid\u201d \u2013 android native application test job. capabilities - This property is extended W3C driver capabilities. scheduling - This property is for running jobs by the schedule. jenkinsGroups - This property is for running jobs in accordance with testng groups annotation. jenkinsEmail - This property takes a comma separated list of emails/distribution lists that end results of a Test Suite will be emailed to. jenkinsFailedEmail - This property takes a comma separated list of emails/distribution lists that end results of a Test Suite that contains failures will be emailed to. jenkinsRegressionPipeline - This property takes a comma separated string of the various pipelines that a specific Test Suite will be attached to. jenkinsEnvironments - This property takes a comma separated string of the various environments that might be tested for that particular suite i.e. PROD, QA, DEV, STAGE, BETA, etc. jenkinsPipelineEnvironments - This property takes a comma separated string of the various environments that will be tested for a particular suite in a particular pipeline (i.e. PROD,QA,DEV,STAGE) jenkinsJobExecutionOrder - This property takes a number value and allows for a pipeline to be generated which will run tests in a sequential synchronous manner, compared to the default asynchronous manner. jenkinsJobExecutionMode - This property is only consumed when a jenkinsJobExecutionOrder has been set on a pipeline which would put that pipeline into a synchronous mode and takes a value of \"continue\" or \"abort\". When it is \"abort\" we halt the entire pipeline as only failed job detected. It might be useful to setup extended health-check scenarios. jenkinsRegressionMatrix - This property we use for creating configuration test matrix. overrideFields - This property takes any number of custom fields that need to be available at run-time for a job to run successfully. They can override any CI parameter forcibly. jenkinsSlackChannels - This property is responsible for send test run results to Slack channel via slack-api. jenkinsFailedSlackChannels - This property takes a comma separated list of slack channels to notify about failures. jenkinsQueueRegistration - This property is a boolean parameter to manage queue registration. Disabling is recommended for suites with dynamic number of tests or dynamic test names. jenkinsDefaultRetryCount - This property allows to provide custom retry_count property (number of extra attempts for test execution). jenkinsNodeLabel - This property allows to override slave label and execute test on custom server. overrideFields - This property allows to add custom Fields that can override default fields. provider - This property is for add provider for test job. jenkinsAutoScreenshot - This property is a boolean parameter mostly to enable auto_screenshot which is disabled by default. jenkinsEnableVideo - This property is a boolean parameter mostly to disable video recording which is enabled by default. Support Channel Join Telegram channel in case of any question","title":"User Guide"},{"location":"user-guide/#user-guide","text":"","title":"User Guide"},{"location":"user-guide/#preconditions","text":"TestNG repository is available. For quick start use carina archetype Infrustructure is deployed, and optionally onPullRequest/onPush events configured.","title":"Preconditions"},{"location":"user-guide/#continious-intergration-jenkins","text":"All test jobs are created and maintained automatically according to IaC processes. For every TestNG suite dedicated job is created. For example visit carina suites","title":"Continious Intergration (Jenkins)"},{"location":"user-guide/#test-jobs-apiwebmobile","text":"To generate special type of jobs, coverage matrix etc we have to use special annotations otherwise \"api\" job is generated using suite \"name\" . Test Jobs can be executed on-demand, scheduled, included into different testing layers (Smoke, Regression, etc.).","title":"Test Jobs (API/Web/Mobile)"},{"location":"user-guide/#create-a-job","text":"Open TestNG suite xml file Fill the bunch of parameters in your xml: <parameter name=\"suiteOwner\" value=\"qpsdemo\"/> <parameter name=\"jenkinsJobName\" value=\"Job1\"/> <parameter name=\"jenkinsJobType\" value=\"api\"/> <parameter name=\"jenkinsEmail\" value=\"test@qaprosoft.com\"/> <parameter name=\"jenkinsEnvironments\" value=\"DEMO\"/> Commit and merge. After scan is finished (automatic or manual) \"Job1\" test job is created in Jenkins.","title":"Create a Job"},{"location":"user-guide/#run-a-job","text":"Steps: Login to Jenkins Go to organization/repository and open a Job Click Build with Parameters and run Build When Job is completed analyze published reports/logs (Carina reports/Zafira reports/TestNG reports)","title":"Run a Job"},{"location":"user-guide/#schedule-a-job","text":"Open TestNG suite xml file Declare \"scheduling\" parameter : <parameter name=\"scheduling\" value=\"H 2 * * *\" /> Note: Provide regular Jenkins Cron expression as a value. To organize multiple schedules use \"\\n\" as separator: <parameter name=\"scheduling\" value=\"H 2 * * *\\nH 10 * * *\" /> Commit and merge.","title":"Schedule a Job"},{"location":"user-guide/#delete-a-job","text":"Delete TestNG suite xml file Commit and merge. Ask your administrator to remove the Job on Jenkins.","title":"Delete a Job"},{"location":"user-guide/#cron-jobs-layer-of-testing","text":"Jenkins Pipeline Cron - this is a job that can execute different suites/jobs in scope of single run. Test Job can be assigned to testing layer(cron) using \"jenkinsRegressionPipeline\" annotation.","title":"Cron Jobs (Layer of Testing)"},{"location":"user-guide/#create-a-cron","text":"Open TestNG suite xml file Declare \"jenkinsRegressionPipeline\" property in xml: <parameter name=\"jenkinsRegressionPipeline\" value=\"nightly_regression, full_regression\"/> Commit and merge. After scan is finished (automatic or manual) nightly_regression and full_regression crons are created in Jenkins. During execution nightly_regression or full_regression crons current test suite(job) must be executed.","title":"Create a Cron"},{"location":"user-guide/#how-to-set-up-configuration-matrix","text":"Open TestNG suite xml file Declare \"jenkinsRegressionMatrix\" property in xml: <parameter name=\"jenkinsRegressionPipeline\" value=\"Carina-Demo-Regression-Pipeline\"/> <parameter name=\"jenkinsRegressionMatrix\" value=\"env: DEMO, branch: master; env:PROD, branch: prod\"/> Commit and merge. After scan is finished (automatic or manual) Carina-Demo-Regression-Pipeline cron job is created in Jenkins. Every time you run Carina-Demo-Regression-Pipeline job it should start your suite xml child job twice for DEMO and PROD environments using appropriate branches. Note: Any param values pairs can be provided. Comma separated - for single job params. Semicolon separated for multiple child job params.","title":"How to Set up Configuration Matrix"},{"location":"user-guide/#run-a-cron","text":"Steps: Go to organization/repository and open a Cron Job Note: There is a \"CRON\" view for such kind of jobs Click Build with Parameters and run Build Cron Job should trigger children jobs according to desired configuration matrix When Cron and children jobs are finished analyze children jobs' reports/logs (Carina reports/Zafira reports/TestNG reports)","title":"Run a Cron"},{"location":"user-guide/#schedule-a-cron","text":"Open any child TestNG suite xml file Declare \"jenkinsRegressionScheduling\" parameter : <parameter name=\"jenkinsRegressionPipeline\" value=\"Carina-Demo-Regression-Pipeline\"/> <parameter name=\"jenkinsRegressionScheduling\" value=\"H 2 * * *\" /> Commit and merge. After scan is finished (automatic or manual) Carina-Demo-Regression-Pipeline is created and sheduled to run periodically in Jenkins.","title":"Schedule a Cron"},{"location":"user-guide/#delete-a-cron","text":"Open each TestNG suite xml file(s) and remove declaration of \"jenkinsRegressionPipeline\" property. Commit and merge. Ask your administrator to delete Cron job in Jenkins","title":"Delete a Cron"},{"location":"user-guide/#special-annotations","text":"To start there are a number of additional parameters that can be added to an existing Test Suite xml. These parameters are: jenkinsJobName - This property is just the name that Jenkins should create a job for, the normal pattern here is to include the platform name in the job itself to make it easier to find inside of Jenkins. jenkinsJobDisabled - This property is for disable job on Jenkins. jenkinsJobType \u2013 This property tells Jenkins what type of job it is. This field can take a \u201cweb\u201d, \u201capi\u201d, \u201cios\u201d, \u201candroid\u201d value. For each type of job appropriate capabilities and parameter are generated. If value set to \u201capi\u201d \u2013 Jenkins knows that there is no need to use web browser for run this Test Suite. If value set to \u201cweb\u201d \u2013 Jenkins will use web browser to run the Test. Chrome browser will be used by default. If value set to \u201cios\u201d \u2013 ios native application test job. If value set to \u201candroid\u201d \u2013 android native application test job. capabilities - This property is extended W3C driver capabilities. scheduling - This property is for running jobs by the schedule. jenkinsGroups - This property is for running jobs in accordance with testng groups annotation. jenkinsEmail - This property takes a comma separated list of emails/distribution lists that end results of a Test Suite will be emailed to. jenkinsFailedEmail - This property takes a comma separated list of emails/distribution lists that end results of a Test Suite that contains failures will be emailed to. jenkinsRegressionPipeline - This property takes a comma separated string of the various pipelines that a specific Test Suite will be attached to. jenkinsEnvironments - This property takes a comma separated string of the various environments that might be tested for that particular suite i.e. PROD, QA, DEV, STAGE, BETA, etc. jenkinsPipelineEnvironments - This property takes a comma separated string of the various environments that will be tested for a particular suite in a particular pipeline (i.e. PROD,QA,DEV,STAGE) jenkinsJobExecutionOrder - This property takes a number value and allows for a pipeline to be generated which will run tests in a sequential synchronous manner, compared to the default asynchronous manner. jenkinsJobExecutionMode - This property is only consumed when a jenkinsJobExecutionOrder has been set on a pipeline which would put that pipeline into a synchronous mode and takes a value of \"continue\" or \"abort\". When it is \"abort\" we halt the entire pipeline as only failed job detected. It might be useful to setup extended health-check scenarios. jenkinsRegressionMatrix - This property we use for creating configuration test matrix. overrideFields - This property takes any number of custom fields that need to be available at run-time for a job to run successfully. They can override any CI parameter forcibly. jenkinsSlackChannels - This property is responsible for send test run results to Slack channel via slack-api. jenkinsFailedSlackChannels - This property takes a comma separated list of slack channels to notify about failures. jenkinsQueueRegistration - This property is a boolean parameter to manage queue registration. Disabling is recommended for suites with dynamic number of tests or dynamic test names. jenkinsDefaultRetryCount - This property allows to provide custom retry_count property (number of extra attempts for test execution). jenkinsNodeLabel - This property allows to override slave label and execute test on custom server. overrideFields - This property allows to add custom Fields that can override default fields. provider - This property is for add provider for test job. jenkinsAutoScreenshot - This property is a boolean parameter mostly to enable auto_screenshot which is disabled by default. jenkinsEnableVideo - This property is a boolean parameter mostly to disable video recording which is enabled by default.","title":"Special Annotations"},{"location":"user-guide/#support-channel","text":"Join Telegram channel in case of any question","title":"Support Channel"}]}